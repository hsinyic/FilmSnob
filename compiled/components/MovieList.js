import Movies from './Movies.js';
import Search from './Search.js';
import Add from './Add.js';

class MovieList extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movieDataBase: this.props.exampleMovieList,
      filteredMovies: this.props.exampleMovieList,
      searchStr: "",
      addMovieStr: "",
      watchedList: []
    };
    this.updateSearchStr = this.updateSearchStr.bind(this);
    this.updatefilteredMovies = this.updatefilteredMovies.bind(this);
    this.searchMovies = this.searchMovies.bind(this);
    this.addMovie = this.addMovie.bind(this);
    this.typeMovie = this.typeMovie.bind(this);
  }

  updateSearchStr(e) {
    event.preventDefault();
    this.setState({
      searchStr: e.target.value
    });
  }
  updatefilteredMovies(newList) {
    event.preventDefault();
    this.setState({
      filteredMovies: newList
    });
  }

  searchMovies(q) {
    event.preventDefault();
    return new Promise((resolve, reject) => {
      console.log('q', q);
      var q = this.state.searchStr;
      resolve(q);
    }).then(q => {
      this.updatefilteredMovies(this.state.movieDataBase.filter(i => i.title.includes(q)));
    });
  }

  updateWatchedList(movie) {
    event.preventDefault();
    this.setState({
      watchedList: this.state.watchedList.concat({ title: movie })
    });
  }
  addMovie(e) {
    event.preventDefault();
    var p = new Promise((resolve, reject) => {
      this.setState({
        movieDataBase: this.state.movieDataBase.concat([{ title: this.state.addMovieStr }])
      });
      resolve();
    }).then(() => {
      this.searchMovies(this.state.searchStr);
    });
  }

  typeMovie(e) {
    event.preventDefault();
    this.setState({
      addMovieStr: e.target.value
    });
  }

  render() {
    return React.createElement(
      'div',
      { className: 'movie-list' },
      React.createElement(
        'div',
        null,
        React.createElement(Movies, { filteredMovies: this.state.filteredMovies })
      ),
      React.createElement(Search, { updateSearchStr: this.updateSearchStr, updatefilteredMovies: this.updatefilteredMovies,
        searchMovies: this.searchMovies, updateWatchedList: this.updateWatchedList }),
      React.createElement(Add, { typeMovie: this.typeMovie, addMovie: this.addMovie })
    );
  }
}

MovieList.propTypes = {
  exampleMovieList: React.PropTypes.array.isRequired
};
export default MovieList;
window.MovieList = MovieList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvTW92aWVMaXN0LmpzIl0sIm5hbWVzIjpbIk1vdmllcyIsIlNlYXJjaCIsIkFkZCIsIk1vdmllTGlzdCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibW92aWVEYXRhQmFzZSIsImV4YW1wbGVNb3ZpZUxpc3QiLCJmaWx0ZXJlZE1vdmllcyIsInNlYXJjaFN0ciIsImFkZE1vdmllU3RyIiwid2F0Y2hlZExpc3QiLCJ1cGRhdGVTZWFyY2hTdHIiLCJiaW5kIiwidXBkYXRlZmlsdGVyZWRNb3ZpZXMiLCJzZWFyY2hNb3ZpZXMiLCJhZGRNb3ZpZSIsInR5cGVNb3ZpZSIsImUiLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic2V0U3RhdGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5ld0xpc3QiLCJxIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb25zb2xlIiwibG9nIiwidGhlbiIsImZpbHRlciIsImkiLCJ0aXRsZSIsImluY2x1ZGVzIiwidXBkYXRlV2F0Y2hlZExpc3QiLCJtb3ZpZSIsImNvbmNhdCIsInAiLCJyZW5kZXIiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheSIsImlzUmVxdWlyZWQiLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE1BQVAsTUFBbUIsYUFBbkI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGFBQW5CO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixVQUFoQjs7QUFFQSxNQUFNQyxTQUFOLFNBQXdCQyxNQUFNQyxTQUE5QixDQUF3QztBQUNwQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLHFCQUFnQixLQUFLRixLQUFMLENBQVdHLGdCQURoQjtBQUVYQyxzQkFBaUIsS0FBS0osS0FBTCxDQUFXRyxnQkFGakI7QUFHWEUsaUJBQVksRUFIRDtBQUlYQyxtQkFBYSxFQUpGO0FB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S25CLFNBQXZCLEVBQWtDLFVBQVksS0FBS0QsUUFBbkQ7QUFOQSxLQURGO0FBVUQ7QUFqRm1DOztBQW9GeENoQixVQUFVeUMsU0FBVixHQUFzQjtBQUNwQmxDLG9CQUFrQk4sTUFBTXlDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQztBQURwQixDQUF0QjtBQUdBLGVBQWU1QyxTQUFmO0FBQ0E2QyxPQUFPN0MsU0FBUCxHQUFpQkEsU0FBakIiLCJmaWxlIjoiTW92aWVMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vdmllcyBmcm9tICcuL01vdmllcy5qcyc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJy4vU2VhcmNoLmpzJztcbmltcG9ydCBBZGQgZnJvbSAnLi9BZGQuanMnO1xuXG5jbGFzcyBNb3ZpZUxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG4gICAgICB0aGlzLnN0YXRlID0geyAgXG4gICAgICAgIG1vdmllRGF0YUJhc2UgOiB0aGlzLnByb3BzLmV4YW1wbGVNb3ZpZUxpc3QsXG4gICAgICAgIGZpbHRlcmVkTW92aWVzIDogdGhpcy5wcm9wcy5leGFtcGxlTW92aWVMaXN0LFxuICAgICAgICBzZWFyY2hTdHIgOiBcIlwiLFxuICAgICAgICBhZGRNb3ZpZVN0cjogXCJcIixcbiAgICAgICAgd2F0Y2hlZExpc3Q6W10sXG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVNlYXJjaFN0ciA9IHRoaXMudXBkYXRlU2VhcmNoU3RyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnVwZGF0ZWZpbHRlcmVkTW92aWVzID0gdGhpcy51cGRhdGVmaWx0ZXJlZE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5zZWFyY2hNb3ZpZXMgPSB0aGlzLnNlYXJjaE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hZGRNb3ZpZSA9IHRoaXMuYWRkTW92aWUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZU1vdmllID0gdGhpcy50eXBlTW92aWUuYmluZCh0aGlzKTtcblxuICAgIH1cblxuICAgIHVwZGF0ZVNlYXJjaFN0cihlKXtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7ICAgXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2VhcmNoU3RyOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHVwZGF0ZWZpbHRlcmVkTW92aWVzKG5ld0xpc3Qpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaWx0ZXJlZE1vdmllczogbmV3TGlzdCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc2VhcmNoTW92aWVzKHEpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgICBcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBjb25zb2xlLmxvZygncScsIHEpXG4gICAgICAgIHZhciBxID0gdGhpcy5zdGF0ZS5zZWFyY2hTdHI7XG4gICAgICAgIHJlc29sdmUocSk7XG4gICAgICB9KS50aGVuKCAocSk9PntcbiAgICAgICAgdGhpcy51cGRhdGVmaWx0ZXJlZE1vdmllcyh0aGlzLnN0YXRlLm1vdmllRGF0YUJhc2UuZmlsdGVyKGk9PiBpLnRpdGxlLmluY2x1ZGVzKHEpKSk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICB1cGRhdGVXYXRjaGVkTGlzdChtb3ZpZSl7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAgIFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHdhdGNoZWRMaXN0OiAgdGhpcy5zdGF0ZS53YXRjaGVkTGlzdC5jb25jYXQoe3RpdGxlOm1vdmllfSlcbiAgICAgIH0pXG5cbiAgICB9XG4gICAgYWRkTW92aWUoZSl7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAgIFxuICAgICAgdmFyIHAgPSAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBtb3ZpZURhdGFCYXNlOiB0aGlzLnN0YXRlLm1vdmllRGF0YUJhc2UuY29uY2F0KFt7dGl0bGUgOiB0aGlzLnN0YXRlLmFkZE1vdmllU3RyfV0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pLnRoZW4oICgpPT57XG4gICAgICAgICAgdGhpcy5zZWFyY2hNb3ZpZXModGhpcy5zdGF0ZS5zZWFyY2hTdHIpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdHlwZU1vdmllKGUpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgICBcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhZGRNb3ZpZVN0cjogZS50YXJnZXQudmFsdWUsXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW92aWUtbGlzdFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICA8TW92aWVzIGZpbHRlcmVkTW92aWVzID0ge3RoaXMuc3RhdGUuZmlsdGVyZWRNb3ZpZXN9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxTZWFyY2ggdXBkYXRlU2VhcmNoU3RyID0ge3RoaXMudXBkYXRlU2VhcmNoU3RyfSB1cGRhdGVmaWx0ZXJlZE1vdmllcyA9e3RoaXMudXBkYXRlZmlsdGVyZWRNb3ZpZXN9IFxuICAgICAgICBzZWFyY2hNb3ZpZXM9e3RoaXMuc2VhcmNoTW92aWVzfSB1cGRhdGVXYXRjaGVkTGlzdD0ge3RoaXMudXBkYXRlV2F0Y2hlZExpc3R9Lz5cbiAgICAgICAgPEFkZCB0eXBlTW92aWUgPSB7dGhpcy50eXBlTW92aWV9IGFkZE1vdmllID0ge3RoaXMuYWRkTW92aWV9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxufVxuICBcbk1vdmllTGlzdC5wcm9wVHlwZXMgPSB7XG4gIGV4YW1wbGVNb3ZpZUxpc3Q6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgTW92aWVMaXN0O1xud2luZG93Lk1vdmllTGlzdD1Nb3ZpZUxpc3Q7Il19