import Movies from './Movies.js';
import Search from './Search.js';
import Add from './Add.js';

class MovieList extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movieDataBase: this.props.exampleMovieList,
      filteredMovies: this.props.exampleMovieList,
      searchStr: "",
      addMovieStr: ""
    };
    this.updateSearchStr = this.updateSearchStr.bind(this);
    this.updatefilteredMovies = this.updatefilteredMovies.bind(this);
    this.searchMovies = this.searchMovies.bind(this);
    this.addMovie = this.addMovie.bind(this);
    this.typeMovie = this.typeMovie.bind(this);
  }

  updateSearchStr(e) {
    // console.log(e.target.value);
    this.setState({
      searchStr: e.target.value
    });
  }
  updatefilteredMovies(newList) {
    event.preventDefault();
    this.setState({
      filteredMovies: newList
    });
  }

  searchMovies(q) {
    console.log('searching');
    event.preventDefault();
    console.log('query', q);
    console.log('existing database', this.state.movieDataBase);

    let filteredM = this.state.movieDataBase.filter(i => i.title.includes(q));
    console.log('after filtering', filteredM);
    this.updatefilteredMovies(filteredM);
  }

  addMovie(e) {
    event.preventDefault();
    console.log('now adding', this.state.addMovieStr);
    var p = new Promise((resolve, reject) => {
      this.setState({
        movieDataBase: this.state.movieDataBase.concat([{ title: this.state.addMovieStr }])
      });
      resolve();
    }).then(() => {
      this.searchMovies(this.state.searchStr);
    });
  }

  typeMovie(e) {
    this.setState({
      addMovieStr: e.target.value
    });
  }

  render() {
    return React.createElement(
      'div',
      { className: 'movie-list' },
      React.createElement(
        'div',
        null,
        React.createElement(Movies, { filteredMovies: this.state.filteredMovies })
      ),
      React.createElement(Search, { updateSearchStr: this.updateSearchStr, updatefilteredMovies: this.updatefilteredMovies,
        searchMovies: this.searchMovies }),
      React.createElement(Add, { typeMovie: this.typeMovie, addMovie: this.addMovie })
    );
  }
}

MovieList.propTypes = {
  exampleMovieList: React.PropTypes.array.isRequired
};
export default MovieList;
window.MovieList = MovieList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvTW92aWVMaXN0LmpzIl0sIm5hbWVzIjpbIk1vdmllcyIsIlNlYXJjaCIsIkFkZCIsIk1vdmllTGlzdCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibW92aWVEYXRhQmFzZSIsImV4YW1wbGVNb3ZpZUxpc3QiLCJmaWx0ZXJlZE1vdmllcyIsInNlYXJjaFN0ciIsImFkZE1vdmllU3RyIiwidXBkYXRlU2VhcmNoU3RyIiwiYmluZCIsInVwZGF0ZWZpbHRlcmVkTW92aWVzIiwic2VhcmNoTW92aWVzIiwiYWRkTW92aWUiLCJ0eXBlTW92aWUiLCJlIiwic2V0U3RhdGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5ld0xpc3QiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicSIsImNvbnNvbGUiLCJsb2ciLCJmaWx0ZXJlZE0iLCJmaWx0ZXIiLCJpIiwidGl0bGUiLCJpbmNsdWRlcyIsInAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbmNhdCIsInRoZW4iLCJyZW5kZXIiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheSIsImlzUmVxdWlyZWQiLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE1BQVAsTUFBbUIsYUFBbkI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGFBQW5CO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixVQUFoQjs7QUFFQSxNQUFNQyxTQUFOLFNBQXdCQyxNQUFNQyxTQUE5QixDQUF3QztBQUNwQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLHFCQUFnQixLQUFLRixLQUFMLENBQVdHLGdCQURoQjtBQUVYQyxzQkFBaUIsS0FBS0osS0FBTCxDQUFXRyxnQkFGakI7QUFHWEUsaUJBQVksRUFIRDtBQUlYQyxtQkFBYTtBQUpGLEtBQWI7QUFNQSxTQUFLQyxlQUFMLEdBQXVCLEtBQUtBLGVBQUwsQ0FBcUJDLElBQXJCLENBQTBCLElBQTFCLENBQXZCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBS0Esb0JBQUwsQ0FBMEJELElBQTFCLENBQStCLElBQS9CLENBQTVCO0FBQ0EsU0FBS0UsWUFBTCxHQUFvQixLQUFLQSxZQUFMLENBQWtCRixJQUFsQixDQUF1QixJQUF2QixDQUFwQjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxDQUFjSCxJQUFkLENBQW1CLElBQW5CLENBQWhCO0FBQ0EsU0FBS0ksU0FBTCxHQUFpQixLQUFLQSxTQUFMLENBQWVKLElBQWYsQ0FBb0IsSUFBcEIsQ0FBakI7QUFDRDs7QUFLREQsa0JBQWdCTSxDQUFoQixFQUFrQjtBQUNoQjtBQUNBLFNBQUtDLFFBQUwsQ0FBYztBQUNaVCxpQkFBV1EsRUFBRUUsTUFBRixDQUFTQztBQURSLEtBQWQ7QUFHRDtBQUNEUCx1QkFBcUJRLE9BQXJCLEVBQTZCO0FBQzNCQyxVQUFNQyxjQUFOO0FBQ0EsU0FBS0wsUUFBTCxDQUFjO0FBQ1pWLHNCQUFnQmE7QUFESixLQUFkO0FBR0Q7O0FBRURQLGVBQWFVLENBQWIsRUFBZTtBQUNiQyxZQUFRQyxHQUFSLENBQVksV0FBWjtBQUNBSixVQUFNQyxjQUFOO0FBQ0FFLFlBQVFDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CRixDQUFwQjtBQUNBQyxZQUFRQyxHQUFSLENBQVksbUJBQVosRUFBaUMsS0FBS3JCLEtBQUwsQ0FBV0MsYUFBNUM7O0FBRUEsUUFBSXFCLFlBQVksS0FBS3RCLEtBQUwsQ0FBV0MsYUFBWCxDQUF5QnNCLE1BQXpCLENBQWdDQyxLQUFJQSxFQUFFQyxLQUFGLENBQVFDLFFBQVIsQ0FBaUJQLENBQWpCLENBQXBDLENBQWhCO0FBQ0FDLFlBQVFDLEdBQVIsQ0FBWSxpQkFBWixFQUE4QkMsU0FBOUI7QUFDQSxTQUFLZCxvQkFBTCxDQUEwQmMsU0FBMUI7QUFDRDs7QUFJRFosV0FBU0UsQ0FBVCxFQUFXO0FBQ1RLLFVBQU1DLGNBQU47QUFDQUUsWUFBUUMsR0FBUixDQUFZLFlBQVosRUFBMEIsS0FBS3JCLEtBQUwsQ0FBV0ssV0FBckM7QUFDQSxRQUFJc0IsSUFBSyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQW1CO0FBQ3RDLFdBQUtqQixRQUFMLENBQWM7QUFDVlosdUJBQWUsS0FBS0QsS0FBTCxDQUFXQyxhQUFYLENBQXlCOEIsTUFBekIsQ0FBZ0MsQ0FBQyxFQUFDTixPQUFRLEtBQUt6QixLQUFMLENBQVdLLFdBQXBCLEVBQUQsQ0FBaEM7QUFETCxPQUFkO0FBR0F3QjtBQUNELEtBTFEsRUFLTkcsSUFMTSxDQUtBLE1BQUk7QUFDVCxXQUFLdkIsWUFBTCxDQUFrQixLQUFLVCxLQUFMLENBQVdJLFNBQTdCO0FBQ0QsS0FQTSxDQUFUO0FBU0Q7O0FBRURPLFlBQVVDLENBQVYsRUFBWTtBQUNWLFNBQUtDLFFBQUwsQ0FBYztBQUNaUixtQkFBYU8sRUFBRUUsTUFBRixDQUFTQztBQURWLEtBQWQ7QUFHRDs7QUFHRGtCLFdBQVM7QUFDUCxXQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsWUFBZjtBQUNBO0FBQUE7QUFBQTtBQUNBLDRCQUFDLE1BQUQsSUFBUSxnQkFBa0IsS0FBS2pDLEtBQUwsQ0FBV0csY0FBckM7QUFEQSxPQURBO0FBSUEsMEJBQUMsTUFBRCxJQUFRLGlCQUFtQixLQUFLRyxlQUFoQyxFQUFpRCxzQkFBdUIsS0FBS0Usb0JBQTdFO0FBQ0Esc0JBQWMsS0FBS0MsWUFEbkIsR0FKQTtBQU1BLDBCQUFDLEdBQUQsSUFBSyxXQUFhLEtBQUtFLFNBQXZCLEVBQWtDLFVBQVksS0FBS0QsUUFBbkQ7QUFOQSxLQURGO0FBVUQ7QUE3RW1DOztBQWdGeENmLFVBQVV1QyxTQUFWLEdBQXNCO0FBQ3BCaEMsb0JBQWtCTixNQUFNdUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDO0FBRHBCLENBQXRCO0FBR0EsZUFBZTFDLFNBQWY7QUFDQTJDLE9BQU8zQyxTQUFQLEdBQWlCQSxTQUFqQiIsImZpbGUiOiJNb3ZpZUxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW92aWVzIGZyb20gJy4vTW92aWVzLmpzJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9TZWFyY2guanMnO1xuaW1wb3J0IEFkZCBmcm9tICcuL0FkZC5qcyc7XG5cbmNsYXNzIE1vdmllTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgIHRoaXMuc3RhdGUgPSB7ICBcbiAgICAgICAgbW92aWVEYXRhQmFzZSA6IHRoaXMucHJvcHMuZXhhbXBsZU1vdmllTGlzdCxcbiAgICAgICAgZmlsdGVyZWRNb3ZpZXMgOiB0aGlzLnByb3BzLmV4YW1wbGVNb3ZpZUxpc3QsXG4gICAgICAgIHNlYXJjaFN0ciA6IFwiXCIsXG4gICAgICAgIGFkZE1vdmllU3RyOiBcIlwiXG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVNlYXJjaFN0ciA9IHRoaXMudXBkYXRlU2VhcmNoU3RyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnVwZGF0ZWZpbHRlcmVkTW92aWVzID0gdGhpcy51cGRhdGVmaWx0ZXJlZE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5zZWFyY2hNb3ZpZXMgPSB0aGlzLnNlYXJjaE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hZGRNb3ZpZSA9IHRoaXMuYWRkTW92aWUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZU1vdmllID0gdGhpcy50eXBlTW92aWUuYmluZCh0aGlzKTtcbiAgICB9XG5cblxuICBcblxuICAgIHVwZGF0ZVNlYXJjaFN0cihlKXtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWFyY2hTdHI6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgfSlcbiAgICB9XG4gICAgdXBkYXRlZmlsdGVyZWRNb3ZpZXMobmV3TGlzdCl7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpbHRlcmVkTW92aWVzOiBuZXdMaXN0LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzZWFyY2hNb3ZpZXMocSl7XG4gICAgICBjb25zb2xlLmxvZygnc2VhcmNoaW5nJylcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zb2xlLmxvZygncXVlcnknLHEpO1xuICAgICAgY29uc29sZS5sb2coJ2V4aXN0aW5nIGRhdGFiYXNlJywgdGhpcy5zdGF0ZS5tb3ZpZURhdGFCYXNlKTtcblxuICAgICAgbGV0IGZpbHRlcmVkTSA9IHRoaXMuc3RhdGUubW92aWVEYXRhQmFzZS5maWx0ZXIoaT0+IGkudGl0bGUuaW5jbHVkZXMocSkpO1xuICAgICAgY29uc29sZS5sb2coJ2FmdGVyIGZpbHRlcmluZycsZmlsdGVyZWRNKTtcbiAgICAgIHRoaXMudXBkYXRlZmlsdGVyZWRNb3ZpZXMoZmlsdGVyZWRNKTtcbiAgICB9XG5cblxuXG4gICAgYWRkTW92aWUoZSl7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc29sZS5sb2coJ25vdyBhZGRpbmcnLCB0aGlzLnN0YXRlLmFkZE1vdmllU3RyKTtcbiAgICAgIHZhciBwID0gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbW92aWVEYXRhQmFzZTogdGhpcy5zdGF0ZS5tb3ZpZURhdGFCYXNlLmNvbmNhdChbe3RpdGxlIDogdGhpcy5zdGF0ZS5hZGRNb3ZpZVN0cn1dKVxuICAgICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KS50aGVuKCAoKT0+e1xuICAgICAgICAgIHRoaXMuc2VhcmNoTW92aWVzKHRoaXMuc3RhdGUuc2VhcmNoU3RyKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHR5cGVNb3ZpZShlKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhZGRNb3ZpZVN0cjogZS50YXJnZXQudmFsdWUsXG4gICAgICB9KVxuICAgIH1cblxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb3ZpZS1saXN0XCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgIDxNb3ZpZXMgZmlsdGVyZWRNb3ZpZXMgPSB7dGhpcy5zdGF0ZS5maWx0ZXJlZE1vdmllc30vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFNlYXJjaCB1cGRhdGVTZWFyY2hTdHIgPSB7dGhpcy51cGRhdGVTZWFyY2hTdHJ9IHVwZGF0ZWZpbHRlcmVkTW92aWVzID17dGhpcy51cGRhdGVmaWx0ZXJlZE1vdmllc30gXG4gICAgICAgIHNlYXJjaE1vdmllcz17dGhpcy5zZWFyY2hNb3ZpZXN9IC8+XG4gICAgICAgIDxBZGQgdHlwZU1vdmllID0ge3RoaXMudHlwZU1vdmllfSBhZGRNb3ZpZSA9IHt0aGlzLmFkZE1vdmllfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIH1cbn1cbiAgXG5Nb3ZpZUxpc3QucHJvcFR5cGVzID0ge1xuICBleGFtcGxlTW92aWVMaXN0OiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxufTtcbmV4cG9ydCBkZWZhdWx0IE1vdmllTGlzdDtcbndpbmRvdy5Nb3ZpZUxpc3Q9TW92aWVMaXN0OyJdfQ==