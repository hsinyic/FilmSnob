import Movies from './Movies.js';
import Search from './Search.js';
import Add from './Add.js';

class MovieList extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      movieDataBase: this.props.exampleMovieList,
      filteredMovies: this.props.exampleMovieList,
      searchStr: "",
      addMovieStr: ""
    };
    this.updateSearchStr = this.updateSearchStr.bind(this);
    this.updatefilteredMovies = this.updatefilteredMovies.bind(this);
    this.searchMovies = this.searchMovies.bind(this);
    this.addMovie = this.addMovie.bind(this);
    this.typeMovie = this.typeMovie.bind(this);
  }

  updateSearchStr(e) {
    this.setState({
      searchStr: e.target.value
    });
  }
  updatefilteredMovies(newList) {
    event.preventDefault();
    this.setState({
      filteredMovies: newList
    });
  }

  searchMovies(q) {
    event.preventDefault();
    this.updatefilteredMovies(this.state.movieDataBase.filter(i => i.title.includes(q)));
  }

  addMovie(e) {
    event.preventDefault();
    var p = new Promise((resolve, reject) => {
      this.setState({
        movieDataBase: this.state.movieDataBase.concat([{ title: this.state.addMovieStr }])
      });
      resolve();
    }).then(() => {
      this.searchMovies(this.state.searchStr);
    });
  }

  typeMovie(e) {
    this.setState({
      addMovieStr: e.target.value
    });
  }

  render() {
    return React.createElement(
      'div',
      { className: 'movie-list' },
      React.createElement(
        'div',
        null,
        React.createElement(Movies, { filteredMovies: this.state.filteredMovies })
      ),
      React.createElement(Search, { updateSearchStr: this.updateSearchStr, updatefilteredMovies: this.updatefilteredMovies,
        searchMovies: this.searchMovies }),
      React.createElement(Add, { typeMovie: this.typeMovie, addMovie: this.addMovie })
    );
  }
}

MovieList.propTypes = {
  exampleMovieList: React.PropTypes.array.isRequired
};
export default MovieList;
window.MovieList = MovieList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvTW92aWVMaXN0LmpzIl0sIm5hbWVzIjpbIk1vdmllcyIsIlNlYXJjaCIsIkFkZCIsIk1vdmllTGlzdCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibW92aWVEYXRhQmFzZSIsImV4YW1wbGVNb3ZpZUxpc3QiLCJmaWx0ZXJlZE1vdmllcyIsInNlYXJjaFN0ciIsImFkZE1vdmllU3RyIiwidXBkYXRlU2VhcmNoU3RyIiwiYmluZCIsInVwZGF0ZWZpbHRlcmVkTW92aWVzIiwic2VhcmNoTW92aWVzIiwiYWRkTW92aWUiLCJ0eXBlTW92aWUiLCJlIiwic2V0U3RhdGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5ld0xpc3QiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicSIsImZpbHRlciIsImkiLCJ0aXRsZSIsImluY2x1ZGVzIiwicCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uY2F0IiwidGhlbiIsInJlbmRlciIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFycmF5IiwiaXNSZXF1aXJlZCIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsTUFBUCxNQUFtQixhQUFuQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsYUFBbkI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFVBQWhCOztBQUVBLE1BQU1DLFNBQU4sU0FBd0JDLE1BQU1DLFNBQTlCLENBQXdDO0FBQ3BDQyxjQUFZQyxLQUFaLEVBQW1CO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMscUJBQWdCLEtBQUtGLEtBQUwsQ0FBV0csZ0JBRGhCO0FBRVhDLHNCQUFpQixLQUFLSixLQUFMLENBQVdHLGdCQUZqQjtBQUdYRSxpQkFBWSxFQUhEO0FBSVhDLG1CQUFhO0FBSkYsS0FBYjtBQU1BLFNBQUtDLGVBQUwsR0FBdUIsS0FBS0EsZUFBTCxDQUFxQkMsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBdkI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixLQUFLQSxvQkFBTCxDQUEwQkQsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBNUI7QUFDQSxTQUFLRSxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JGLElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBQ0EsU0FBS0csUUFBTCxHQUFnQixLQUFLQSxRQUFMLENBQWNILElBQWQsQ0FBbUIsSUFBbkIsQ0FBaEI7QUFDQSxTQUFLSSxTQUFMLEdBQWlCLEtBQUtBLFNBQUwsQ0FBZUosSUFBZixDQUFvQixJQUFwQixDQUFqQjtBQUNEOztBQUVERCxrQkFBZ0JNLENBQWhCLEVBQWtCO0FBQ2hCLFNBQUtDLFFBQUwsQ0FBYztBQUNaVCxpQkFBV1EsRUFBRUUsTUFBRixDQUFTQztBQURSLEtBQWQ7QUFHRDtBQUNEUCx1QkFBcUJRLE9BQXJCLEVBQTZCO0FBQzNCQyxVQUFNQyxjQUFOO0FBQ0EsU0FBS0wsUUFBTCxDQUFjO0FBQ1pWLHNCQUFnQmE7QUFESixLQUFkO0FBR0Q7O0FBRURQLGVBQWFVLENBQWIsRUFBZTtBQUNiRixVQUFNQyxjQUFOO0FBQ0EsU0FBS1Ysb0JBQUwsQ0FBMEIsS0FBS1IsS0FBTCxDQUFXQyxhQUFYLENBQXlCbUIsTUFBekIsQ0FBZ0NDLEtBQUlBLEVBQUVDLEtBQUYsQ0FBUUMsUUFBUixDQUFpQkosQ0FBakIsQ0FBcEMsQ0FBMUI7QUFDRDs7QUFFRFQsV0FBU0UsQ0FBVCxFQUFXO0FBQ1RLLFVBQU1DLGNBQU47QUFDQSxRQUFJTSxJQUFLLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBbUI7QUFDdEMsV0FBS2QsUUFBTCxDQUFjO0FBQ1ZaLHVCQUFlLEtBQUtELEtBQUwsQ0FBV0MsYUFBWCxDQUF5QjJCLE1BQXpCLENBQWdDLENBQUMsRUFBQ04sT0FBUSxLQUFLdEIsS0FBTCxDQUFXSyxXQUFwQixFQUFELENBQWhDO0FBREwsT0FBZDtBQUdBcUI7QUFDRCxLQUxRLEVBS05HLElBTE0sQ0FLQSxNQUFJO0FBQ1QsV0FBS3BCLFlBQUwsQ0FBa0IsS0FBS1QsS0FBTCxDQUFXSSxTQUE3QjtBQUNELEtBUE0sQ0FBVDtBQVNEOztBQUVETyxZQUFVQyxDQUFWLEVBQVk7QUFDVixTQUFLQyxRQUFMLENBQWM7QUFDWlIsbUJBQWFPLEVBQUVFLE1BQUYsQ0FBU0M7QUFEVixLQUFkO0FBR0Q7O0FBRURlLFdBQVM7QUFDUCxXQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsWUFBZjtBQUNBO0FBQUE7QUFBQTtBQUNBLDRCQUFDLE1BQUQsSUFBUSxnQkFBa0IsS0FBSzlCLEtBQUwsQ0FBV0csY0FBckM7QUFEQSxPQURBO0FBSUEsMEJBQUMsTUFBRCxJQUFRLGlCQUFtQixLQUFLRyxlQUFoQyxFQUFpRCxzQkFBdUIsS0FBS0Usb0JBQTdFO0FBQ0Esc0JBQWMsS0FBS0MsWUFEbkIsR0FKQTtBQU1BLDBCQUFDLEdBQUQsSUFBSyxXQUFhLEtBQUtFLFNBQXZCLEVBQWtDLFVBQVksS0FBS0QsUUFBbkQ7QUFOQSxLQURGO0FBVUQ7QUEvRG1DOztBQWtFeENmLFVBQVVvQyxTQUFWLEdBQXNCO0FBQ3BCN0Isb0JBQWtCTixNQUFNb0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDO0FBRHBCLENBQXRCO0FBR0EsZUFBZXZDLFNBQWY7QUFDQXdDLE9BQU94QyxTQUFQLEdBQWlCQSxTQUFqQiIsImZpbGUiOiJNb3ZpZUxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW92aWVzIGZyb20gJy4vTW92aWVzLmpzJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9TZWFyY2guanMnO1xuaW1wb3J0IEFkZCBmcm9tICcuL0FkZC5qcyc7XG5cbmNsYXNzIE1vdmllTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgIHRoaXMuc3RhdGUgPSB7ICBcbiAgICAgICAgbW92aWVEYXRhQmFzZSA6IHRoaXMucHJvcHMuZXhhbXBsZU1vdmllTGlzdCxcbiAgICAgICAgZmlsdGVyZWRNb3ZpZXMgOiB0aGlzLnByb3BzLmV4YW1wbGVNb3ZpZUxpc3QsXG4gICAgICAgIHNlYXJjaFN0ciA6IFwiXCIsXG4gICAgICAgIGFkZE1vdmllU3RyOiBcIlwiXG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVNlYXJjaFN0ciA9IHRoaXMudXBkYXRlU2VhcmNoU3RyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnVwZGF0ZWZpbHRlcmVkTW92aWVzID0gdGhpcy51cGRhdGVmaWx0ZXJlZE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5zZWFyY2hNb3ZpZXMgPSB0aGlzLnNlYXJjaE1vdmllcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hZGRNb3ZpZSA9IHRoaXMuYWRkTW92aWUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZU1vdmllID0gdGhpcy50eXBlTW92aWUuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTZWFyY2hTdHIoZSl7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2VhcmNoU3RyOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHVwZGF0ZWZpbHRlcmVkTW92aWVzKG5ld0xpc3Qpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaWx0ZXJlZE1vdmllczogbmV3TGlzdCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc2VhcmNoTW92aWVzKHEpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudXBkYXRlZmlsdGVyZWRNb3ZpZXModGhpcy5zdGF0ZS5tb3ZpZURhdGFCYXNlLmZpbHRlcihpPT4gaS50aXRsZS5pbmNsdWRlcyhxKSkpO1xuICAgIH1cblxuICAgIGFkZE1vdmllKGUpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBwID0gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbW92aWVEYXRhQmFzZTogdGhpcy5zdGF0ZS5tb3ZpZURhdGFCYXNlLmNvbmNhdChbe3RpdGxlIDogdGhpcy5zdGF0ZS5hZGRNb3ZpZVN0cn1dKVxuICAgICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KS50aGVuKCAoKT0+e1xuICAgICAgICAgIHRoaXMuc2VhcmNoTW92aWVzKHRoaXMuc3RhdGUuc2VhcmNoU3RyKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHR5cGVNb3ZpZShlKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhZGRNb3ZpZVN0cjogZS50YXJnZXQudmFsdWUsXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW92aWUtbGlzdFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICA8TW92aWVzIGZpbHRlcmVkTW92aWVzID0ge3RoaXMuc3RhdGUuZmlsdGVyZWRNb3ZpZXN9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxTZWFyY2ggdXBkYXRlU2VhcmNoU3RyID0ge3RoaXMudXBkYXRlU2VhcmNoU3RyfSB1cGRhdGVmaWx0ZXJlZE1vdmllcyA9e3RoaXMudXBkYXRlZmlsdGVyZWRNb3ZpZXN9IFxuICAgICAgICBzZWFyY2hNb3ZpZXM9e3RoaXMuc2VhcmNoTW92aWVzfSAvPlxuICAgICAgICA8QWRkIHR5cGVNb3ZpZSA9IHt0aGlzLnR5cGVNb3ZpZX0gYWRkTW92aWUgPSB7dGhpcy5hZGRNb3ZpZX0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9XG59XG4gIFxuTW92aWVMaXN0LnByb3BUeXBlcyA9IHtcbiAgZXhhbXBsZU1vdmllTGlzdDogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbn07XG5leHBvcnQgZGVmYXVsdCBNb3ZpZUxpc3Q7XG53aW5kb3cuTW92aWVMaXN0PU1vdmllTGlzdDsiXX0=